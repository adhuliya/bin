#!/usr/bin/env python3
"""
Monitors various system attributes periodically.
It records these parameters in a log file.
"""

import psutil # needs explicit install
import time
import logging
from logging.handlers import RotatingFileHandler

TIME_PERIOD   = 5 # seconds
MAX_CPU_UTIL  = 70 # percent
MAX_MEM_UTIL  = 80 # percent
LOGICAL_CPU   = psutil.cpu_count(logical=True)
PHYSICAL_CPU  = psutil.cpu_count(logical=False)

# START : log config vars
# logging dir is inside home directory of user
logDir         = ".local/sysmonitor"
logFileName    = "sysmonitor.log"
logLevel       = logging.INFO # bocks out lower levels
logFormat1     = "%(message)s, %(asctime)s"
logMaxSize     = 1 << 24 # in bytes 1 << 24 = 16 MB
logBackupCount = 5 # 5 x 16MB = 80 MB logs + one extra current 16 MB logfile.
# END   : log config vars

def initLogger(logFile=logFileName, logLevel=logLevel, logFormat=logFormat1, logMaxSize=logMaxSize, logBackupCount=logBackupCount):

  rootLogger = logging.getLogger()
  rootLogger.setLevel(logLevel)

  handler = RotatingFileHandler(logFile, maxBytes=logMaxSize, backupCount=logBackupCount)
  handler.setFormatter(logging.Formatter(logFormat))

  rootLogger.addHandler(handler)

  rootLogger.info("Initialized with format : %s", repr(logFormat))

def okToStart():
  """
  If system utilization is acceptabely low,
  then return True, else false.
  """
  ok = True
  cpu = psutil.cpu_percent(percpu=True)
  mem = psutil.virtual_memory()
  if int(sum(cpu)/len(cpu)) > MAX_CPU_UTIL:
    ok = False
  if int(mem.percent) > MAX_MEM_UTIL:
    ok = False

  return (ok, sum(cpu)/len(cpu), mem)

def record(cpuUsage, memUsage):
  infoString = "CPU:{:>5.2f}%, MEM:{:>5.2f}%".format(cpuUsage, memUsage.percent)
  print(infoString)
  log.info(infoString)

def loopForever():
  while(True):
    ok = okToStart()

    if ok[0]:
      record(ok[1], ok[2])

    time.sleep(TIME_PERIOD)

if __name__ == "__main__":
  initLogger()
  log = logging.getLogger(__name__)
  loopForever()


