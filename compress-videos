#!/usr/bin/env python3

# for ffmpeg command see http://slhck.info/video/2017/02/24/crf-guide.html
# ffmpeg -i $x -c:v libx264 -crf 23 -strict -2 $compressed/$x &>> $compressed/output.log

# to rotate video
# `ffmpeg -i in.mov -vf "transpose=1" out.mov`
# transpose parameter values:
#   0 = 90CounterClockwise and Vertical Flip (default)
#   1 = 90Clockwise
#   2 = 90CounterClockwise
#   3 = 90Clockwise and Vertical Flip
# For 180 degree:
# `-vf "transpose=2,transpose=2"


import os
import os.path as osp
import subprocess as sub

compressedFolderName = "compressed-videos"

"""
Video type and its all possible file extensions:
    "videoTypeName" : [ lowercase-video-file-extensions ]
Only add videos that can be compressed.
"""
videoTypeExt = {
        "mp4" : [".mp4", ".MP4"],
        "mov" : [".mov", ".MOV"],
        }

"""
Video extension set generated from videoTypeExt dictionary.
"""
videoExtSet = set([v for val in videoTypeExt.values() for v in val])

def isVideoFile(filename):
    ext = osp.splitext(filename)[1]
    if ext.lower() in videoExtSet:
        return True
    else:
        return False

"""
Tells if the filename corresponds to the given video type e.g. "mp4"
"""
def isVideoFileTypeX(filename, videoTypeName):
    ext = osp.splitext(filename)[1]
    if videoTypeName not in videoTypeExt:
        raise TypeError("VideoTypeName not present.")

    if ext.lower() in videoTypeExt[videoTypeName]:
        return True
    else:
        return False


def videoInFolder():
    videoPresent = False

    files = os.listdir()
    for filename in files:
        if isVideoFile(filename):
            videoPresent = True

    return videoPresent

def compressMp4(filename):
    print("AD: Compressing MP4 file {}".format(filename))
    cmd = "ffmpeg -i {filename} -c:v libx264 -crf 28 -strict -2 {folder}/{filename}".format(folder=compressedFolderName, filename=filename)

    cp = sub.run(cmd, shell=True)
    if cp.returncode != 0:
        print("AD: Error while processing file: {filename}".format(filename=filename))

def compressMov(filename):
    print("AD: Compressing MOV file {}".format(filename))

    cmd = "ffmpeg -i {filename} -vcodec h264 -acodec aac -strict -2 {folder}/{filename}".format(folder=compressedFolderName, filename=filename)

    cp = sub.run(cmd, shell=True)
    if cp.returncode != 0:
        print("AD: Error while processing file: {filename}".format(filename=filename))

def compressFolderVideos():
    files = os.listdir()
    vFile = False

    videoFiles = []
    for filename in files:
        if isVideoFile(filename):
            videoFiles.append(filename)

    count = 0
    for filename in videoFiles:
        vfile = False
        if isVideoFileTypeX(filename, "mp4"):
            compressMp4(filename)
            vFile = True
        elif isVideoFileTypeX(filename, "mov"):
            compressMov(filename)
            vFile = True

        if vFile:
            count += 1
            print("AD: Done : [{:>2}/{:>2}]".format(count, len(videoFiles)))


def createCompressedFolderIfNotExists():
    if not osp.exists(compressedFolderName):
        os.mkdir(compressedFolderName)

if __name__ == "__main__":
    if not videoInFolder():
        print("AD: compress-videos: No compressable videos in folder.")
        exit(1)

    createCompressedFolderIfNotExists()

    compressFolderVideos()


