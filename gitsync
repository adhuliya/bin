#!/usr/bin/env bash

# Author: Anshuman Dhuliya [AD] (anshumandhuliya@gmail.com)

# Commit and Sync the changes of local git repo with the remote.

# STEP 0: Run the $BEFORE_COMMIT_SCRIPT script if present
BEFORE_COMMIT_SCRIPT=before_commit.sh;
BC_SCRIPT_PRESENT="no";
DEAD_REPO_FILE=".DEAD_REPO";
_GITSYNC_DISABLE=".GITSYNC_DISABLE"; # stop gitsync from working in the repo

# STEP 1: Goto the base directory housing `./.git` sub-folder.

ABS_PATH="`realpath .`";
_GIT_REPO_PATH="$ABS_PATH";
_GIT_REPO_NAME="$(basename $_GIT_REPO_PATH)";
for x in {1..20}; do    # just loop enough no. of times
  if [[ -d $_GIT_REPO_PATH/.git ]]; then
    # a git repository
    if [[ -e $_GIT_REPO_PATH/$BEFORE_COMMIT_SCRIPT ]]; then
      BC_SCRIPT_PRESENT="yes";
    fi
    break;
  else
    _GIT_REPO_PATH="`dirname $_GIT_REPO_PATH`";
    _GIT_REPO_NAME="$(basename $_GIT_REPO_PATH)";
  fi
done

if [[ $x -eq 20 ]]; then
  echo "$0: ERROR: No git repo found till the root";
  exit 1;
fi


# STEP 2: cd into the root git repo directory (IMPORTANT)

cd $_GIT_REPO_PATH; # go to the directory containing the script
echo -e "\nAD: GIT_REPO: $_GIT_REPO_PATH";


# STEP 3: quit if "${_GITSYNC_DISABLE}*" is present then quit (IMPORTANT).

if [[ -z $(find -maxdepth 1 -name "${_GITSYNC_DISABLE}*") ]]; then
  true; # then continue to next step
else
  echo "AD: GIT_REPO: $_GIT_REPO_NAME (DONE: Since ${_GITSYNC_DISABLE}* present)";
  exit 0; # no error
fi


# STEP 4: now execute the BEFORE_COMMIT_SCRIPT if found

if [[ $BC_SCRIPT_PRESENT == "yes" ]]; then
  echo "AD: Running $BEFORE_COMMIT_SCRIPT script.";
  if bash $BEFORE_COMMIT_SCRIPT; then
    echo "    Successful $_GIT_REPO_NAME/$BEFORE_COMMIT_SCRIPT";
  else
    echo "    ERROR:     $_GIT_REPO_NAME/$BEFORE_COMMIT_SCRIPT failed";
    exit 3;
  fi
else
  echo "  NotPresent: $_GIT_REPO_NAME/$BEFORE_COMMIT_SCRIPT ";
fi


# STEP 5: look for Makefile and execute `make clean` if target "clean" exists

if [[ -e $_GIT_REPO_PATH/Makefile ]]; then
  count="`egrep "^clean:" Makefile | wc -l`";
  if [[ $count -gt 0 ]]; then
    echo "Running 'make clean' on: $_GIT_REPO_NAME";
    make clean &> /dev/null;
  fi
fi

# STEP 6: get the current branch name

__BRANCH_NAME="$(git branch)";     # e.g. value "* master"
_BRANCH_NAME="${__BRANCH_NAME:2}";  # i.e. remove "* " from prefix


# STEP 7: Print urls and check connection to the remote repository.
#         If connection is okay, then fetch the content.

echo "AD: REPO : $(git remote get-url origin)"; # print the remote urls

_CONNECTION_OKAY="yes";
if git ls-remote origin; then
  echo "AD: OKAY : CONNECTION_TEST";
  git fetch; # only the current branch, from the default source
else
  echo "AD: ERROR: CONNECTION_TEST"
  _CONNECTION_OKAY="no";
  # exit 1; # don't exit here, need to commit locally.
fi


# STEP 7: Commit locally if needed.

_OUTPUT="$(git status --short)";

if [[ ! -z $_OUTPUT ]]; then
  echo -e "AD: GIT_REPO: $_GIT_REPO_NAME: Uncommitted changes!!!!";
  git add --all;
  if [[ $? -ne 0 ]]; then echo "ERROR: in adding"; exit 5; fi

  if [ "$1" == "" ]; then
    git commit -m 'semi-automated-update';
    if [[ $? -ne 0 ]]; then echo "ERROR: in commiting"; exit 10; fi
  else
    git commit -m "$1";
    if [[ $? -ne 0 ]]; then echo "ERROR: in commiting"; exit 15; fi
  fi
  echo -e "AD: GIT_REPO: $_GIT_REPO_NAME (DONE: commit)";
else
  echo -e "AD: GIT_STATUS: Okay";
  echo "AD: GIT_REPO: $_GIT_REPO_NAME: No commit needed";
fi


# STEP 8: Print urls and check connection to the remote repository.
#         Exit if connection test fails.

echo "AD: REMOTE: $(git remote get-url origin)"; # print the remote urls

if [[ $_CONNECTION_OKAY == "no" ]] then
  echo "AD: ERROR: CONNECTION_TEST"
  echo "AD: GIT_REPO: $_GIT_REPO_NAME (DONE: ERROR(s))";
  exit 1;
fi


# STEP 9: Fetch remote/origin

echo -e "\nAD: Fetching origin/master."
git fetch; # by default the current branch from its default source
if [[ $? -ne 0 ]]; then
  echo "AD: ERROR: $_GIT_REPO_NAME: Fetching failed"; exit 20;
fi


# STEP 10: Merge and push if $_BRANCH_NAME and origin/$_BRANCH_NAME differ.

if git diff --quiet $_BRANCH_NAME origin/$_BRANCH_NAME; then
  echo "AD: GIT_REPO: $_GIT_REPO_NAME: DONE: No push needed";
  exit 0; # no error
fi


# STEP 11: Push the content to the remote.

echo -e "\nAD: Local and Remote differ. MERGE and PUSH";

# reaches here only when any new content is present

git merge -m "semi-automated-merge" origin/$_BRANCH_NAME;
if [[ $? -ne 0 ]]; then echo "ERROR: in merging"; exit 25; fi
git push; # origin master;
if [[ $? -ne 0 ]]; then echo "ERROR: in pushing"; exit 30; fi

echo "AD: GIT_REPO: $_GIT_REPO_NAME (DONE: PUSHED CHANGES)";


