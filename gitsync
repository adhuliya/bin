#!/usr/bin/env bash

# Author: Anshuman Dhuliya [AD] (anshumandhuliya@gmail.com)

# Commit and Sync the changes of local git repo with the remote.

# STEP 0: Run the $BEFORE_COMMIT_SCRIPT script if present
BEFORE_COMMIT_SCRIPT=before_commit.sh;
SCRIPT_PRESENT="no";

#    find the parent which has a the `.git` folder
ABS_PATH="`realpath .`";
TMP_PATH=$ABS_PATH;
for x in {1..20}; do    # just loop enough no. of times
  if [[ -d $TMP_PATH/.git ]]; then
    # a git repository
    if [[ -e $TMP_PATH/$BEFORE_COMMIT_SCRIPT ]]; then
      SCRIPT_PRESENT="yes";
    fi
    break;
  else
    TMP_PATH="`dirname $TMP_PATH`";
  fi
done

#    now execute the script if found
cd $TMP_PATH; # go to the directory containing the script
if [[ $SCRIPT_PRESENT == "yes" ]]; then
  echo "  Running $BEFORE_COMMIT_SCRIPT script.";
  if bash $BEFORE_COMMIT_SCRIPT; then
    echo "    Successful $TMP_PATH/$BEFORE_COMMIT_SCRIPT";
  else
    echo "    ERROR:     $TMP_PATH/$BEFORE_COMMIT_SCRIPT failed";
    exit 1;
  fi
else
  echo "  NotPresent: $TMP_PATH/$BEFORE_COMMIT_SCRIPT ";
fi


# STEP 1: Commit locally if needed.

OUTPUT=$(git status --short)

if [[ ! -z $OUTPUT ]]; then
  echo -e "AD: GIT STATUS: Uncommitted changes!!!!"
  git add --all
  if [[ $? -ne 0 ]]; then echo "ERROR: in adding"; exit 2; fi

  if [ "$1" == "" ]; then
    git commit -m 'semi-automated-update'
    if [[ $? -ne 0 ]]; then echo "ERROR: in commiting"; exit 3; fi
  else
    git commit -m "$1"
    if [[ $? -ne 0 ]]; then echo "ERROR: in commiting"; exit 4; fi
  fi
else
  echo -e "AD: GIT STATUS: OK"
fi


# STEP 2: Fetch remote/origin

echo -e "\nAD: Fetching origin/master."
git fetch origin master
if [[ $? -ne 0 ]]; then echo "ERROR: in fetching"; exit 5; fi

# STEP 3: Merge and push if master and origin/master differ.

# A fresh repo has no branch `master`.
# Check if `master` exists and only then run `git diff`.
OUTPUT=$(git branch --list)
if [[ -n "$OUTPUT" ]]; then
  echo -e "\nAD: git diff master origin/master."
  OUTPUT=$(git diff master origin/master)
  if [[ -z $OUTPUT ]]; then
     echo "Local state matches origin/master"
     exit
  fi
fi

echo -e "\nAD: Local and Remote differ. Merging and Pushing."

# reaches here only when any new content is present

git merge -m "semi-automated-merge" origin/master
if [[ $? -ne 0 ]]; then echo "ERROR: in merging"; exit 6; fi
git push origin master
if [[ $? -ne 0 ]]; then echo "ERROR: in pushing"; exit 7; fi


