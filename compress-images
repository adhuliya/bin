#!/usr/bin/env python3

import os
import os.path as osp
import subprocess as sub

compressedFolderName = "compressed-images"

"""
Image type and its all possible file extensions:
    "imageTypeName" : [ lowercase-image-file-extensions ]
Only images that can be compressed.
"""
imageTypeExt = {
        "jpeg" : [".jpg", ".jpeg"],
        }

"""
Image extension set generated from imageTypeExt dictionary.
"""
imageExtSet = set([v for val in imageTypeExt.values() for v in val])

def isImageFile(filename):
    ext = osp.splitext(filename)[1]
    if ext.lower() in imageExtSet:
        return True
    else:
        return False

"""
Tells if the filename corresponds to the given image type e.g. "jpeg"
"""
def isImageFileTypeX(filename, imageTypeName):
    ext = osp.splitext(filename)[1]
    if imageTypeName not in imageTypeExt:
        raise TypeError("ImageTypeName not present.")

    if ext.lower() in imageTypeExt[imageTypeName]:
        return True
    else:
        return False


def imageInFolder():
    imagePresent = False

    files = os.listdir()
    for filename in files:
        if isImageFile(filename):
            imagePresent = True

    return imagePresent

def compressJpeg(filename):
    cmd = "jpegoptim -m50 -d {folder} {filename}".format(folder=compressedFolderName, filename=filename)

    cp = sub.run(cmd, shell=True)
    if cp.returncode != 0:
        print("AD: Error while processing file: {filename}".format(filename=filename))

def compressFolderImages():
    files = os.listdir()

    for filename in files:
        if isImageFileTypeX(filename, "jpeg"):
            compressJpeg(filename)

def createCompressedFolderIfNotExists():
    if not osp.exists(compressedFolderName):
        os.mkdir(compressedFolderName)

if __name__ == "__main__":
    if not imageInFolder():
        print("AD: compress-images: No compressable images in folder.")
        exit(1)

    createCompressedFolderIfNotExists()

    compressFolderImages()


