#!/usr/bin/env python3

import os
import os.path as osp
import subprocess as sub

compressedFolderName = "compressed-images"
errorlog = "error.log"

"""
Image type and its all possible file extensions:
    "imageTypeName" : [ lowercase-image-file-extensions ]
Only images that can be compressed.
"""
imageTypeExt = {
        "jpeg" : [".jpg", ".jpeg"],
        }

"""
Image extension set generated from imageTypeExt dictionary.
"""
imageExtSet = set([v for val in imageTypeExt.values() for v in val])

def isImageFile(filename):
    ext = osp.splitext(filename)[1]
    if ext.lower() in imageExtSet:
        return True
    else:
        return False

"""
Tells if the filename corresponds to the given image type e.g. "jpeg"
"""
def isImageFileTypeX(filename, imageTypeName):
    ext = osp.splitext(filename)[1]
    if imageTypeName not in imageTypeExt:
        raise TypeError("ImageTypeName not present.")

    if ext.lower() in imageTypeExt[imageTypeName]:
        return True
    else:
        return False


def imageInFolder():
    imagePresent = False

    files = os.listdir()
    for filename in files:
        if isImageFile(filename):
            imagePresent = True
            break

    return imagePresent

def compressJpeg(filename):
    success = True
    cmd = 'jpegoptim -m50 -d "{folder}" "{filename}" >> "{folder}/{errorlog}" 2>&1'.format(folder=compressedFolderName, filename=filename, errorlog=errorlog)

    cp = sub.run(cmd, shell=True)
    if cp.returncode != 0:
        print("AD: Error for file: {filename}".format(filename=filename))
        success = False

    return success

def compressFolderImages():
    files = os.listdir()
    errorFiles = []
    success = False

    imgFiles = [fn for fn in files if isImageFile(fn)]
    counter = 0

    for filename in imgFiles:
        if isImageFileTypeX(filename, "jpeg"):
            success = compressJpeg(filename)
            if not success:
                errorFiles.append(filename)

        counter += 1
        print("{:3}/{:3} done.\r".format(counter, len(imgFiles)), end='')

    print() # change line

    return errorFiles

def createCompressedFolderIfNotExists():
    if not osp.exists(compressedFolderName):
        os.mkdir(compressedFolderName)

def writeErrorLogHeader():
    cmd = "echo -e \"\nnew log started: `date`\n\n\" >> {folder}/{errorlog}".format(folder=compressedFolderName, errorlog=errorlog)

    cp = sub.run(cmd, shell=True)
    if cp.returncode != 0:
        print("AD: Error in writing to {folder}/{errorlog}".format(folder=compressedFolderName, errorlog=errorlog))

if __name__ == "__main__":
    if not imageInFolder():
        print("AD: compress-images: No compressable images in folder.")
        exit(1)

    createCompressedFolderIfNotExists()
    writeErrorLogHeader();

    errorFiles = compressFolderImages()

    if errorFiles:
        print("AD: ERROR in {} Files,\n{}".format(len(errorFiles), errorFiles))


