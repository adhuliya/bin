#!/usr/bin/env python3

"""
Viewing and updating list of repos in the git/ directory.
"""

import sys, os
import os.path as osp
import re
import subprocess as sub
from io import StringIO
from textwrap import dedent
import copy


mydata = os.environ.get("MYDATA", "/home/codeman/mydata")
reporootdir = osp.join(mydata, "git")
repolistfile = osp.join(reporootdir, "configs-git/mydata-data/repositories.pylist")

usagehelpmsg = """Usage: gitrepo [list|listall|update]

[list|listall] are optional subcommands.

list    : lists all directories that have '.git' subdirectory and '-git' suffix.
listall : lists all directories that have '.git' subdirectory.
update  : update list of git repositories to the file {repolistfile}.

Default search root directory is "{reporootdir}".

""".format(reporootdir=reporootdir, repolistfile=repolistfile)

cmd = {
    "git init": "git init",
    "get origin-url":"git remote get-url origin",
    "set origin-url": "git remote add origin {}",
    "remove origin-url": "git remote remove origin",
    "get global-user.name": "git config --global --get user.name",
    "get local-user.name": "git config --local --get user.name",
    "set global-user.name": "git config --global user.name \"{}\"",
    "set local-user.name": "git config --local user.name \"{}\"",
    "get global-user.email": "git config --global --get user.email",
    "get local-user.email": "git config --local --get user.email",
    "set global-user.email": "git config --global user.email \"{}\"",
    "set local-user.email": "git config --local user.email \"{}\"",
    "git-init": "git init",
    "upstream": "git branch -u origin/master master",
    }

defaultRepo = { 
        "groups": ["all"],
        "dir": "",
        "origin-url": "",
        "user.name": "",
        "user.email": "",
        "live": True,
        "read-only": False,
        }

def findgitrepos(rootdir=reporootdir):
    gitrepos = []
    for root, dirs, files in os.walk(rootdir, topdown=True):
        if ".git" in dirs and root.endswith("-git"):
            relativepath = root.replace(rootdir + "/", "")
            gitrepos.append(relativepath)
            dirs[:] = []
    return gitrepos


def findallgitrepos(rootdir=reporootdir):
    gitrepos = []
    for root, dirs, files in os.walk(rootdir, topdown=True):
        if ".git" in dirs:
            relativepath = root.replace(rootdir + "/", "")
            gitrepos.append(relativepath)
            dirs[:] = []
    return gitrepos


def findToBeSetupGitRepos(rootdir=reporootdir):
    gitrepos = []
    for root, dirs, files in os.walk(rootdir, topdown=True):
        if root.endswith("-git") and ".git" not in dirs:
            relativepath = root.replace(rootdir + "/", "")
            gitrepos.append(relativepath)
            dirs[:] = []
    return gitrepos


def removedeadreposinfo(oldreposinfo):
    livereposinfo = []
    for repoinfo in oldreposinfo:
        if repoinfo["live"]:
            livereposinfo.append(repoinfo)

    return livereposinfo


def getoldreposinfo(repolistfile):
    oldreposinfo = []
    if os.path.exists(repolistfile):
        with open(repolistfile) as f:
            content = f.read()
            if content.strip():
                oldreposinfo = eval(content)

    return oldreposinfo


def addnewreposinfo(oldreposinfo, currrepodirs):
    """
    Adds newly discovered repo's directory and other info.
    All other info except the directory are set to default.
    """
    newrepodirs = []

    updatedreposinfo = oldreposinfo

    oldrepodirs = [repoinfo["dir"] for repoinfo in oldreposinfo]

    for repodir in currrepodirs:
        if repodir not in oldrepodirs:
            newrepodirs.append(repodir)

    for repodir in newrepodirs:
        d = copy.deepcopy(defaultRepo)
        d["dir"] = repodir
        updatedreposinfo.append(d)

    return updatedreposinfo


def dictRepr(d):
    dict_repr = ""
    with StringIO() as sio:
        sio.write("{\n")
        for key in sorted(d):
            sio.write("  {: <14}: {!r},\n".format(repr(key),d[key]))
        sio.write("}")
        dict_repr = sio.getvalue()
    return dict_repr

def generateStats(reposinfo):
    totalRepos = len(reposinfo)
    live = 0
    readOnly = 0
    users = set() # their emails
    groups = set()

    githubRepos = 0
    bitbucketRepos = 0
    gitCseIitbRepos = 0
    otherRepos = 0

    for repoinfo in reposinfo:
        if repoinfo["live"]:
            live += 1
        if repoinfo["read-only"]:
            readOnly += 1

        if repoinfo["origin-url"].find("github.com") >= 0:
            githubRepos += 1
        elif repoinfo["origin-url"].find("bitbucket.org") >= 0:
            bitbucketRepos += 1
        elif repoinfo["origin-url"].find("git.cse.iitb") >= 0:
            gitCseIitbRepos += 1
        else:
            otherRepos += 1
           

        users.add(repoinfo["user.email"])
        for grp in repoinfo["groups"]:
            groups.add(grp)

    # Fromat the stats into a nice Python comment for output
    stats = dedent(
    """\
    # STATS
    # Total Repos : {totalRepos}
    # Live        : {live}
    # Read-Only   : {readOnly}
    # Origins at:
    #   GitHub      : {githubRepos}
    #   Bitbucket   : {bitbucketRepos}
    #   GitCseIitb  : {gitCseIitbRepos}
    #   Others      : {otherRepos}
    # Groups      : {groups}
    # Users       : {users}
    """).format(totalRepos=totalRepos,
                live=live,
                readOnly=readOnly,
                githubRepos=githubRepos,
                bitbucketRepos=bitbucketRepos,
                gitCseIitbRepos=gitCseIitbRepos,
                otherRepos=otherRepos,
                groups=sorted(groups),
                users=sorted(users))

    return stats


def writereposinfo(reposinfo, filename=repolistfile):
    reposinfo.sort(key=lambda x: x["dir"])

    with open(filename, "w") as f:
        f.write(dedent(
        """\
        # Format: List of Python 3 Dicts.
        # Use only string keys, as keys are sorted for printing
        # Note: The file contents are read using builtins.eval()
        """) + (os.linesep))

        f.write(generateStats(reposinfo) + os.linesep*2)

        f.write("["+(os.linesep*2))
        for repoinfo in reposinfo:
            f.write("{},{}".format(dictRepr(repoinfo),(os.linesep*2)))

        f.write("]{}".format(os.linesep*3))


def updateinfo():
    """
    Note: this function never deletes info of a git directory. To delete/modify, do it maually (with caution of course) by modifying the corresponding line in the repository info file (whereever it may be). And deleting all corresponding direcotries on different machines.
    """
    errdirs = []

    oldreposinfo = getoldreposinfo(repolistfile)
    currrepodirs = findgitrepos()

    updatedreposinfo = addnewreposinfo(oldreposinfo, currrepodirs)

    for repoinfo in updatedreposinfo:
        newrepo = False

        if not repoinfo["live"]:
            continue

        repoabsdir = osp.join(reporootdir, repoinfo["dir"])

        os.makedirs(repoabsdir, exist_ok=True)

        os.chdir(repoabsdir)

        print(os.linesep, "$>>> {}".format(repoabsdir), os.linesep, sep="")
        if osp.exists(osp.join(repoabsdir, ".git")):
            # already a git repo
            print("$> ALREADY A GIT REPO")
        else:
            print("$> SETTING UP GIT REPO")
            command = cmd["git init"]
            cp = sub.run(command, shell=True)
            if cp.returncode:
                errdirs.append(repoabsdir)
                print("$> Return Code : {}".format(cp.returncode))
            newrepo = True

        if repoinfo["dir"].endswith("-git"):
            repoinfo["read-only"] = False
        else:
            repoinfo["read-only"] = True

        if repoinfo["origin-url"]:
            if newrepo:
                print("$> FRESH REPO SETUP")

            print("$> Set origin-url")

            if not newrepo:
                command = cmd["remove origin-url"]
                print("$> {}".format(command))
                cp = sub.run(command, shell=True)
                if cp.returncode:
                    errdirs.append(repoabsdir)
                    print("$> Return Code : {}".format(cp.returncode))

            command = cmd["set origin-url"].format(repoinfo["origin-url"])
            print("$> {}".format(command))
            cp = sub.run(command, shell=True)
            if cp.returncode:
                errdirs.append(repoabsdir)
                print("$> Return Code : {}".format(cp.returncode))
        else:
            print("$> Get origin-url")
            command = cmd["get origin-url"]
            print("$> {}".format(command))
            originurl = sub.getoutput(command).strip()
            repoinfo["origin-url"] = originurl

        if repoinfo["user.name"]:
            print("$> Set user.name")
            command = cmd["set local-user.name"].format(repoinfo["user.name"])
            print("$> {}".format(command))
            cp = sub.run(command, shell=True)
            if cp.returncode:
                errdirs.append(repoabsdir)
                print("$> Return Code : {}".format(cp.returncode))
        else:
            print("$> Get user.name")
            command1 = cmd["get local-user.name"]
            command2 = cmd["get global-user.name"]
            print("$> {}".format(command1))
            name = sub.getoutput(command1).strip()
            if not name:
                print("$> {}".format(command2))
                name = sub.getoutput(command2).strip()
            repoinfo["user.name"] = name

        if repoinfo["user.email"]:
            print("$> Set user.email")
            command = cmd["set local-user.email"].format(repoinfo["user.email"])
            print("$> {}".format(command))
            cp = sub.run(command, shell=True)
            if cp.returncode:
                errdirs.append(repoabsdir)
                print("$> Return Code : {}".format(cp.returncode))
        else:
            print("$> Get user.email")
            command1 = cmd["get local-user.email"]
            command2 = cmd["get global-user.email"]
            print("$> {}".format(command1))
            name = sub.getoutput(command1).strip()
            if not name:
                print("$> {}".format(command2))
                name = sub.getoutput(command2).strip()
            repoinfo["user.email"] = name


    writereposinfo(updatedreposinfo)

    if errdirs:
        print("$> Error Dirs:")
        print("$>", errdirs)
        print(os.linesep, "{} ERRORS".format(len(errdirs)), os.linesep)


def printdeadrepos():
    oldreposinfo = getoldreposinfo(repolistfile)
    count = 0
    for repoinfo in oldreposinfo:
        if not repoinfo["live"]:
            printrepoinfo(repoinfo)
            count += 1
    print("Total :", count)


def printrepoinfo(repoinfo):
    print(os.linesep, "$>>> ", repoinfo["dir"], os.linesep, sep="")
    print("origin-url :", repoinfo["origin-url"])
    print("user.name  :", repoinfo["user.name"])
    print("user.email :", repoinfo["user.email"])


if __name__ == "__main__":
    if len(sys.argv) > 2:
        print(usagehelpmsg, file=sys.stderr)
        exit(1)

    rootdir = subcmd = gitrepos = None
    if len(sys.argv) == 1:
        gitrepos = findgitrepos()
        print(os.linesep.join(gitrepos))
        exit(0)

    if len(sys.argv) == 2:
        subcmd = sys.argv[1].strip().lower()
        if subcmd == "list":
            gitrepos = findgitrepos()
            print(os.linesep.join(gitrepos))
            print(os.linesep, len(gitrepos), sep="")
        elif subcmd == "listall":
            gitrepos = findgitrepos()
            print(os.linesep.join(gitrepos))
            print(os.linesep, len(gitrepos), sep="")
        elif subcmd == "tosetup":
            gitrepos = findToBeSetupGitRepos()
            print(os.linesep.join(gitrepos))
            print(os.linesep, len(gitrepos), sep="")
        elif subcmd == "update":
            updateinfo()
        elif subcmd == "dead":
            printdeadrepos()
        else:
            print(usagehelpmsg, file=sys.stderr)
            exit(2)


