#!/usr/bin/env python3

import subprocess as sub
import os
import os.path as osp
import sys


mydata = os.environ["MYDATA"] or "/home/codeman/mydata"
reporootdir = mydata + "/git"
repolistfile = reporootdir + "/configs-git/mydata-data/repositories.pylist"

gitcommands = [
"""git add --all""",
"""git commit -m 'automated-update'""",
"""git fetch origin master""",
"""git merge -m "automated-merge" origin/master""",
"""git push origin master""",
]

readonlygitcommands = [
"""git fetch --prune""",
]

usagemsg = """Usage: datasync [core]

core: only sync bin-git and configs-git

"""

def filterbygroup(reposinfo, groups=["all"]):
    filteredreposinfo = []
    for repoinfo in reposinfo:
        for repogrp in repoinfo["groups"]:
            if repogrp in groups:
                filteredreposinfo.append(repoinfo)

    return filteredreposinfo


def filterdeadrepos(reposinfo):
    livereposinfo = []
    for repoinfo in reposinfo:
        if repoinfo["live"]:
            livereposinfo.append(repoinfo)

    return livereposinfo


def getreposinfo(filename=repolistfile):
    """ read the repoinfo from file """
    reposinfo = []
    with open(filename) as f:
        content = f.read()
        if content.strip():
            reposinfo = eval(content)

    return reposinfo


def getrepodirs(reposinfo=None):
    repodirs = []
    if not reposinfo:
        reposinfo = getreposinfo()
        reposinfo = filterdeadrepos(reposinfo)

    for repoinfo in reposinfo:
        repodirs.append(osp.join(reporootdir, repoinfo["dir"]))

    return repodirs


def syncall(repodirs):
    errdirs = []
    tmperr = 0

    for dirpath in repodirs:
        tmperr = 0
        print(os.linesep, "$>>> ", dirpath, os.linesep, sep="")

        try:
            os.chdir(dirpath)
        except FileNotFoundError as e:
            print("DIRECTORY NOT FOUND", file=sys.stderr)
            print(os.linesep, "ERROR!!", file=sys.stderr, sep="")
            # tmperr = 1
            errdirs.append(dirpath)
            continue

        selectedgitcommands = None
        if dirpath.endswith("-git"):
            selectedgitcommands = gitcommands
        else:
            selectedgitcommands = readonlygitcommands


        for cmd in selectedgitcommands:
            print("$>", cmd)
            cp = sub.run(cmd, shell=True)
            if cp.returncode:
                print("$>", "ReturnCode :", cp.returncode)
            if cmd.find(" commit ") >= 0 and cp.returncode == 1:
                pass
            elif cp.returncode != 0:
                tmperr = 1
                break # don't run any further commands

        if tmperr == 0:
            print("SUCCESS")
        else:
            errdirs.append(dirpath)
            print("ERROR!!", file=sys.stderr)

    return errdirs

def scangroups(argv):
    groups = []
    if len(argv) == 1:
        groups = ["all"] # sync all dirs in repodirs
    else:
        groups = [g.strip().lower() for g in sys.argv[1:]]

    return groups


if __name__ == "__main__":

    reposinfo = filterdeadrepos(getreposinfo())

    groups = scangroups(sys.argv)

    reposinfo = filterbygroup(reposinfo, groups)

    if not reposinfo:
        print("NO REPOS MATCH SELECTION. EXITING")
        exit(1)

    repodirs = getrepodirs(reposinfo)
    errdirs = syncall(repodirs)
    if errdirs:
        print("Error Dirs:", os.linesep, errdirs, file=sys.stderr)
        print(os.linesep, "{} ERRORS".format(len(errdirs)), os.linesep, sep="", file=sys.stderr)
    else:
        print(os.linesep, "SUCCESS. :)", os.linesep, sep="")


