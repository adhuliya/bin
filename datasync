#!/usr/bin/env python3

import subprocess as sub
import os
import os.path as osp
import sys


myData = os.environ["MYDATA"] or "/home/codeman/mydata"
repoRootDir = myData + "/git"
repoListFile = repoRootDir + "/configs-git/mydata-data/repositories.pylist"

gitCommands = [
"""git add --all""",
"""git commit -m 'automated-update'""",
"""git fetch origin master""",
"""git merge -m "automated-merge" origin/master""",
"""git push origin master""",
]

readOnlyGitCommands = [
"""git fetch --prune""",
]

usageMsg = """Usage: datasync [<groupName> [, <groupName> [...]]

groupName: only sync repos in 'group_name', default is 'all' live repos.

"""

def filterByGroup(repos, groups=["all"]):
    """
    Filters out all repoInfos from repos, not belonging to the given groups.
    """
    filteredReposInfo = []
    for repo in repos:
        for repoGroup in repo["groups"]:
            if repoGroup in groups:
                filteredReposInfo.append(repo)

    return filteredReposInfo


def filterDeadRepos(repos):
    """
    Filters out all the 'dead' repoInfos from repos.
    """
    liveReposInfo = []
    for repo in repos:
        if repo["live"]:
            liveReposInfo.append(repo)

    return liveReposInfo


def filterByPath(repos, pathSubString=None):
    """
    Filters out repoInfos from repos, which have the 'pathSubString' in their
    directory path.
    Possible future use.
    """
    if pathSubString is None:
        return repos

    filteredReposInfo = []
    for repo in repos:
        if pathSubString in repo["dir"]:
            filteredReposInfo.append(repo)

    return filteredReposInfo


def readReposInfoFile(filename=repoListFile):
    """ read the repoInfos from the given file """
    repos = []
    with open(filename) as f:
        content = f.read()
        if content.strip():
            repos = eval(content)

    return repos


def getRepoDirs(repos=None):
    repoDirs = []
    if not repos:
        repos = readReposInfoFile()
        repos = filterDeadRepos(repos)

    for repo in repos:
        repoDirs.append(osp.join(repoRootDir, repo["dir"]))

    return repoDirs


def syncAll(repoDirs):
    errDirs = []
    tmpErr = 0

    for dirpath in repoDirs:
        tmpErr = 0
        print(os.linesep, "$>>> ", dirpath, os.linesep, sep="")

        try:
            os.chdir(dirpath)
        except FileNotFoundError as e:
            print("DIRECTORY NOT FOUND", file=sys.stderr)
            print(os.linesep, "ERROR!!", file=sys.stderr, sep="")
            # tmpErr = 1
            errDirs.append(dirpath)
            continue

        selectedGitCommands = None
        if dirpath.endswith("-git"):
            selectedGitCommands = gitCommands
        else:
            selectedGitCommands = readOnlyGitCommands


        for cmd in selectedGitCommands:
            print("$>", cmd)
            cp = sub.run(cmd, shell=True)
            if cp.returncode:
                print("$> ReturnCode :", cp.returncode)
            if cp.returncode == 1 and cmd.find(" commit ") >= 0:
                pass
            elif cp.returncode != 0:
                tmpErr = 1
                break # don't run any further commands

        if tmpErr == 0:
            print("SUCCESS")
        else:
            errDirs.append(dirpath)
            print("ERROR!!", file=sys.stderr)

    return errDirs


def scanGroups(argv):
    groups = []
    if len(argv) == 1:
        groups = ["all"] # sync all dirs in repoDirs
    else:
        groups = [g.strip().lower() for g in sys.argv[1:]]

    return groups


if __name__ == "__main__":

    repos = filterDeadRepos(getReposInfo())

    groups = scanGroups(sys.argv)

    repos = filterByGroup(repos, groups)

    if not repos:
        print("NO REPOS MATCH SELECTION. EXITING")
        exit(1)

    repoDirs = getRepoDirs(repos)
    errDirs = syncAll(repoDirs)
    if errDirs:
        print("Error Dirs:", os.linesep, errDirs, file=sys.stderr)
        print(os.linesep, "{} ERRORS".format(len(errDirs)), os.linesep, sep="", file=sys.stderr)
    else:
        print(os.linesep, "SUCCESS. :)", os.linesep, sep="")


