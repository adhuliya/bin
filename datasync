#!/usr/bin/env python3

import subprocess as sub
import os
import os.path as osp
import sys


mydata = "/home/codeman/mydata"
reporootdir = mydata + "/git"
repolistfile = reporootdir + "/configs-git/mydata-data/repositories.pylist"

gitcommands = [
"""git add --all""",
"""git commit -m 'automated-update'""",
"""git fetch origin master""",
"""git merge -m "automated-merge" origin/master""",
"""git push origin master""",
]

usagemsg = """Usage: datasync [core]

core: only sync bin-git and configs-git

"""


def getoldreposinfo():
    oldreposinfo = []
    with open(repolistfile) as f:
        content = f.read()
        if content.strip():
            oldreposinfo = eval(content)

    return oldreposinfo


def getrepodirs():
    repodirs = []
    reposinfo = getoldreposinfo()

    for repoinfo in reposinfo:
        repodirs.append(osp.join(reporootdir, repoinfo["dir"]))

    return repodirs


def syncall(repodirs=None):
    errdirs = []
    tmperr = 0

    if not repodirs:
        repodirs = getrepodirs()

    for dirpath in repodirs:
        tmperr = 0
        print(os.linesep, "$>>> ", dirpath, os.linesep, sep="")

        try:
            os.chdir(dirpath)
        except FileNotFoundError as e:
            print("DIRECTORY NOT FOUND", file=sys.stderr)
            print(os.linesep, "ERROR!!", file=sys.stderr, sep="")
            # tmperr = 1
            errdirs.append(dirpath)
            continue

        for cmd in gitcommands:
            print("$>", cmd)
            cp = sub.run(cmd, shell=True)
            if cp.returncode:
                print("$>", "ReturnCode :", cp.returncode)
            if cmd.find(" commit ") >= 0 and cp.returncode == 1:
                pass
            elif cp.returncode != 0:
                tmperr = 1

        if tmperr == 0:
            print("SUCCESS")
        else:
            errdirs.append(dirpath)
            print("ERROR!!", file=sys.stderr)

    return errdirs


def synccore():
    repodirs = getrepodirs()

    coredirs = []
    for repodir in repodirs:
        if repodir.endswith("bin-git") or repodir.endswith("configs-git"):
            coredirs.append(repodir)

    return syncall(coredirs)


if __name__ == "__main__":
    if len(sys.argv) > 2:
        print(usagemsg, file=sys.stderr)
        exit(1)

    if len(sys.argv) == 2:
        if sys.argv[1].strip().lower() == "core":
            errdirs = synccore()
            if errdirs:
                print("Error Dirs:", os.linesep, errdirs, file=sys.stderr)
                print(os.linesep, "{} ERRORS".format(len(errdirs)), os.linesep, sep="", file=sys.stderr)
            else:
                print(os.linesep, "SUCCESS. :)", os.linesep, sep="")
            exit(0)
        else:
            print(usagemsg, file=sys.stderr)
            exit(1)


    print(os.linesep, "PYTHON SCRIPT STARTED", sep="")
    errdirs = syncall()
    if errdirs:
        print("Error Dirs:", os.linesep, errdirs, file=sys.stderr)
        print(os.linesep, "{} ERRORS".format(len(errdirs)), os.linesep, sep="", file=sys.stderr)
    else:
        print(os.linesep, "SUCCESS. :)", os.linesep, sep="")


